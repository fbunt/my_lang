D    [0-9]
NZ   [1-9]
H    [a-fA-F0-9]
HP   (0[xX])
A    [a-zA-Z_]
AN   [a-zA-Z_0-9]
E    ([Ee][+-]?{D}+)

%{
#include <iostream>
#include <string>
#include "ast.hpp"
#include "parser.hpp"

#define SAVE_TOKEN yylval.string = new std::string(yytext, yyleng)
#define TOKEN(t) (yylval.token = t)

extern "C" int yylex();

%}

/***
 Each rule returns a token identifier which is generated by bison
 and is defined in the mlang.tab.h file. yylval is a union
 of possible data types defined in the bison file. We convert
 the value of the int or string matches and store it within the
 union structure.


\"(\\.|[^"\\])*\"  { SAVE_TOKEN; return STRING; }
"^"                { return TOKEN(EXP); }
***/
%%

[ \t\n]            ;

"fn"              { return TOKEN(FN); }

"true"             { SAVE_TOKEN; return BOOLEAN; }
"false"            { SAVE_TOKEN; return BOOLEAN; }

{HP}{H}+           { SAVE_TOKEN; return INTEGER; }
{NZ}{D}*           { SAVE_TOKEN; return INTEGER; }

{D}+{E}?           { SAVE_TOKEN; return FLOAT; }
{D}*"."{D}+{E}?    { SAVE_TOKEN; return FLOAT; }
{D}+"."{E}?        { SAVE_TOKEN; return FLOAT; }

{A}{AN}*           { SAVE_TOKEN; return IDENTIFIER; }

"="                { return TOKEN(EQUALS); }
"+"                { return TOKEN(ADD); }
"-"                { return TOKEN(SUB); }
"*"                { return TOKEN(MULT); }
"/"                { return TOKEN(DIV); }

"=="               { return TOKEN(COMP_EQ); }
"!="               { return TOKEN(COMP_NEQ); }
"<="               { return TOKEN(COMP_LEQ); }
">="               { return TOKEN(COMP_GEQ); }
"<"                { return TOKEN(COMP_LT); }
">"                { return TOKEN(COMP_GT); }

"->"               { return TOKEN(ARROW); }
"("                { return TOKEN(LPAREN); }
")"                { return TOKEN(RPAREN); }
"{"                { return TOKEN(LBRACE); }
"}"                { return TOKEN(RBRACE); }
"."                { return TOKEN(DOT); }
","                { return TOKEN(COMMA); }
";"                { return TOKEN(SEMI); }
.                  { std::cout << "Unknown token" << std::endl; yyterminate(); }


%%
